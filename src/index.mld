{0 ltl2ba documentation}

{1 The context}

This program has been implemented during the course {i Introduction à la
vérification} of the University of Bordeaux.

The goal is to implement {!section-algo} used to translate a LTL formula into
an equivalent {!section-genbuch}.

{1 List of modules}

- {{: parser.html} [Parser]} - The LTL parser
- {{: core.html} [Core]} - The implementation of the algorithm

{1:algo The algorithm}

{i This algorithm is taken from the course {e Introduction à la vérification}
written by {{:https://www.labri.fr/profil/Zeitoun_ID1120210651}Marc Zeitoun}.}

Let φ be an LTL formula.

{2 The first phase}

The first phase consists in putting φ in {i negation normal form} (NNF), where:

- all negation appear only in front of the atomic propositions,
- only other logical operators [∧], and [∨] can appear, and
- only the temporal operator [X], [U], and [R] can appear.

{3 The negation normal form}

To calculate {i nnf(φ)}, following rules can be applied recursively -- see
{!val: Core.Ltl.nnf}:

- nnf(ρ) = ρ
- nnf(¬¬φ) = nnf(φ)
- nnf(¬(φ ∨ ψ)) = nnf(¬φ) ∧ nnf(¬ψ)
- nnf(¬(φ ∧ ψ)) = nnf(¬φ) ∨ nnf(¬ψ)
- nnf(¬Xφ) = X nnf(¬φ)
- nnf(¬(φ U ψ)) = nnf(¬φ) R nnf(¬ψ)
- nnf(¬(φ R ψ)) = nnf(¬φ) U nnf(¬ψ)

{2:second The second phase}

For the second phase, let reassign φ as {i nnf(φ)} and define 𝒜 = (S, ⟶, S{_0},
F{_1}, ..., F{_k}) as the equivalent Büchi automata of φ. An automata state s ∈
S is a subset of sub-formulas of φ and the initial state S{_0} is \{φ\}.

{3:reduce Reduced subset}

A subset Z of formulas in NNF is {b reduced} if:

- formulas of Z are of the form: p, ¬q, or Xα,
- ⊥ ∉ Z, and ∀.p ∈ AP, \{p, ¬p\} ⊈ Z.

{3 Transitions}

In order to define transitions from a state Y, an oriented graph is build from
Y. Let Y = Z ∪ \{α\} where α is not a {!section-reduce} and is {b maximal} in Y
(i.e. α is not a sub-formula of any other such formula of Y).
Edges from Y are:

- If α = α{_1} ∨ α{_2}, Y ⟶ Z ∪ \{α{_1}\} and Y ⟶ Z ∪ \{α{_2}\}.
- If α = α{_1} ∧ α{_2}, Y ⟶ Z ∪ \{α{_1}, α{_2}\}.
- If α = α{_1} R α{_2}, Y ⟶ Z ∪ \{α{_1}, α{_2}\} and Y ⟶ Z ∪ \{Xα, α{_2}\}.
- If α = α{_1} U α{_2}, Y ⟶ Z ∪ \{α{_2}\} and Y ⟶{^α} Z ∪ \{Xα, α{_1}\}.

The symbol ⟶{^α} means the edge is {b marked} by α.

Then, is defined:

- Red(Y) = \{Z reduced | Y ⟶{^*} Z\}
- Red{_α}(Y) = \{Z reduced | Y ⟶{^*} without using an edge marked by α\}

When all formulas in Z are reduced, is defined:

- next(Z) = \{α | Xα ∈ Z\}
- Σ{_Z} the intersection of all p and ¬p in Z.

Finally, transitions from Y are: \{Y ⟶{^Σ{_Z}} next(Z) | Z ⊆ Red(Y)\}. Is added
an {b acceptance condition} for each sub-formula α wich is an Until: F{_α} =
\{Y ⟶{^Σ{_Z}} next(Z) | Y ⊆ S and Z ⊆ Red{_α}(Y)\}.

{3:genbuch Generalized Büchi automata on transitions}

At the end the automata built, is a generalized Büchi automata {i on
transitions}: it's similar to generalized Büchi automata except that {b
acceptance conditions are set of transitions} instead of set of states. A {b
run} from the initial state is accepted, if for each acceptance conditions, it
goes infinitely often through a transition of this condition.

{2 Summary}

The automata 𝒜 = (S, ⟶, S{_0}, F{_1}, ..., F{_k}) equivalent to the formula φ,
is defined with:

- Initial state: S{_0} = \{φ\}
- Transitions from a state Y: \{Y ⟶{^Σ{_Z}} next(Z) | Z ⊆ Red(Y)\}
- Acceptance conditions: ∀.α ∈ φ, with α = α{_1} U α{_2}: F{_α} =
\{Y ⟶{^Σ{_Z}} next(Z) | Y ⊆ S and Z ⊆ Red{_α}(Y)\}

{2 Example φ = p U Xq}

Let apply the {!section-algo} to the LTL formula φ = p U Xq.

Note that φ is already in NNF, therefore we can go directly to the
{!section-second}.

Let's calculate transitions from the initial state S{_0} = \{p U Xq\}.
We have the edges of the intermediate oriented graph from S{_0}:

+ S{_0} ⟶ \{\} ∪ \{α{_2}\} = \{Xq\}
+ S{_0} ⟶ {^φ} \{\} ∪ \{Xα, α{_1}\} = \{X(φ), p\}

In first edge, \{Xq\} is reduced, therefore the transition: \{φ\} ⟶{^Σ} \{q\} =
S{_0} ⟶{^Σ} \{q\} and the state \{q\} need to be added to 𝒜.

In the second one, \{X(φ), p\} is reduced, therefore the transition: \{φ\} ⟶{^p}
\{φ\} = S{_0} ⟶{^p} \{φ\} needs to be added to 𝒜.

Finally, Red{_φ}(S{_0}) = \{Xq\}, because it's the only reduced state reachable
by a non marked edge. Therefore, the acceptance condition: F{_φ} = \{S{_0}
⟶{^Σ} next(\{Xq\})\} = \{S{_0} ⟶{^Σ} \{q\})\} needs to be added to 𝒜.

Now, let's repeat previous steps for the state \{q\}.

We have Red(\{q\}) = Red_φ(\{q\}) = \{q\}, therefore, there is a transition
from \{q\} to next(\{q\}) = \{\} marked with \{q\}.
Same reasoning for the new state \{\}.

At the end, 𝒜 is defined with:

- S = \{\{φ\}, \{q\}\},
- Σ = \{p, q\}
- \{φ\} ⟶{^p} \{φ\}, \{φ\} ⟶{^Σ} \{q\}, \{q\} ⟶{^q} \{\} and \{\} ⟶{^Σ} \{\}.
- S{_0} = \{φ\}
- F{_φ} = \{\{φ\} ⟶{^Σ} \{q\}, \{q\} ⟶{^q} \{\}, \{\} ⟶{^Σ} \{\} \}

{v

      +-----+   Σ   +-----+  {q}  +----+
   -->| {φ} |======>| {q} |======>| {} |
      +-----+       +-----+       +----+
       |   ^                      ||   ^
       \---/                      \\==//
        {p}                         Σ

   ==>: acceptance condition
v}
