{0 ltl2ba documentation}

{1 The context}

This program has been implemented during the course {i Introduction à la
vérification} of the University of Bordeaux.

The goal is to implement {!section-algo} used to translate a LTL formula into
an equivalent Büchi automata -- on transitions.

{1:algo The algorithm}

Let φ be an LTL formula.

{2 The first phase}

The first phase consists in putting φ in {i negation normal form} (NNF), where:

- all negation appear only in front of the atomic propositions,
- only other logical operators [∧], and [∨] can appear, and
- only the temporal operator [X], [U], and [R] can appear.

To calculate {i nnf(φ)}, following rules can be applied recursively -- see
{!val: Ltl.nnf}:

- nnf(ρ) = ρ
- nnf(¬¬φ) = nnf(φ)
- nnf(¬(φ ∨ ψ)) = nnf(¬φ) ∧ nnf(¬ψ)
- nnf(¬(φ ∧ ψ)) = nnf(¬φ) ∨ nnf(¬ψ)
- nnf(¬Xφ) = X nnf(¬φ)
- nnf(¬(φ U ψ)) = nnf(¬φ) R nnf(¬ψ)
- nnf(¬(φ R ψ)) = nnf(¬φ) U nnf(¬ψ)

{2 The second phase}

For the second phase, let reassign φ as {i nnf(φ)}.

{1 List of modules}

- {{: parser.html} [Parser]} - The LTL parser
- {{: Ltl/index.html} [Ltl]} - The LTL formula representation
